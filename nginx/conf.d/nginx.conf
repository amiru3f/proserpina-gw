#user  nobody;
#Defines which Linux system user will own and run the Nginx server

worker_processes  1;
#Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.

#error_log  logs/error.log; #error_log  logs/error.log  notice;
#Specifies the file where server logs. 

#pid        logs/nginx.pid;
#nginx will write its master process ID(PID).

events {
    worker_connections  1024;
    # worker_processes and worker_connections allows you to calculate maxclients value: 
    # max_clients = worker_processes * worker_connections
}


http {
#    include       mime.types;
    # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block

    default_type  application/octet-stream;
    #

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    # If serving locally stored static files, sendfile is essential to speed up the server,
    # But if using as reverse proxy one can deactivate it
    
    #tcp_nopush     on;
    # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at once.

    #keepalive_timeout  0;
    keepalive_timeout  65;
    # timeout during which a keep-alive client connection will stay open.

    #gzip  on;
    # tells the server to use on-the-fly gzip compression.

    server {
        listen       80;
        
        server_name  localhost;

        location /health {
            #auth_request /gw-auth;
		    proxy_pass http://hello:5000/public/health;
        }

        location /hello {
            auth_request /gw-auth; 
            auth_request_set $fullname $upstream_http_fullname;
            auth_request_set $userId $upstream_http_user_id;

		    proxy_pass http://hello:5000/restricted/hello;
	    	proxy_pass_request_headers      on;
		    proxy_set_header fullname $fullname;
		    proxy_set_header "user-id" $userId;
        }

	    location = /gw-auth {
	    	internal;
	    	proxy_pass http://auth:5000/validateToken;
	    	proxy_pass_request_headers      on;
	    	proxy_pass_request_body off;
	    	proxy_set_header        Content-Length "";
	    }

        location /token {
            proxy_pass http://auth:5000/getToken;
        }

    }
}
